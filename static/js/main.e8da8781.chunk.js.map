{"version":3,"sources":["components/Weather.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["minmaxTemp","min","max","className","weather","props","city","weatherIcon","celcius","tempMIN","tempMAX","description","form","error","role","onSubmit","loadWeather","type","name","placeholder","App","convertInCelcius","temp","Math","floor","getWeather","event","a","preventDefault","target","elements","value","country","fetch","apiCall","json","response","console","log","cod","setState","sys","main","temp_min","temp_max","getWeatherIcon","id","state","undefined","icon","calsius","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeID","this","Form","Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e8da8781.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst weather =(props) =>{\r\n    return(\r\n        <div className=\"container \">\r\n            <div className=\"cards\">\r\n                \r\n                <h2 className= \"f2 gold\">{props.city} </h2>\r\n                {props.weatherIcon ?(\r\n                    <h1 > \r\n                    <i className= {`wi ba br4 black bg-light-yellow b--red bw2 fw5 f1 pa3 ${props.weatherIcon} `}  ></i>\r\n                    </h1>\r\n                ): null}\r\n                \r\n                {props.celcius ?(\r\n                    <h2 className=\"tc \">{props.celcius}&deg;</h2>\r\n                ) : null}\r\n                \r\n                {minmaxTemp(props.tempMIN , props.tempMAX)}\r\n                <p className=\" f2 yellow  b tc\">{props.description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst minmaxTemp=((min,max)=>{\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n                <span className=\"pa2 f3 \">{min}&deg;</span>\r\n                <span className=\"pa2 f3\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n    \r\n    \r\n});\r\n\r\nexport default weather;","import React from 'react';\r\n\r\n\r\n\r\nconst form =(props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? errorOccured() :null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"row\">\r\n                    <input  className=\"pa2 ma2 bg-light-blue\" type=\"text\" name=\"city\" placeholder=\"Enter City\" ></input>\r\n                    <input  className=\"pa2 ma2 bg-light-blue\" type=\"text\" name=\"country\" placeholder=\"Enter Country\" ></input>\r\n                    <button  className=\"f6 br3 link dim ph3 pv2 mb2 dib white bg-hot-pink\" > Search Weather</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction errorOccured() {\r\n    return(\r\n        <div className=\"alert red b\" role=\"alert\">\r\n            Please Enter Valid city and Country\r\n        </div>\r\n    )\r\n}\r\nexport default form;","import React from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './Form'\n\nconst APIkey =\"2126665e2906fef1ae7a71865ea23584\";\n\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk\n\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      calsius:undefined,\n      tempMAX:undefined,\n      tempMIN:undefined,\n      description:\"\",\n      error:false,\n    };\n    \n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\",\n\n\n    };\n  }\n  \n  convertInCelcius=(temp)=>{\n    return Math.floor(temp-273.15);\n  }\n  getWeatherIcon(icon,rangeID){\n    switch(true){\n      case rangeID >=200 && rangeID <=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeID >=300 && rangeID <=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID >=500 && rangeID <=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeID >=600 && rangeID <=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeID >=701 && rangeID <=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeID ===800:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeID >=801 && rangeID<=804 :\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Atmosphere}); \n    }\n  }\n\n  getWeather =async(event) => {\n    event.preventDefault();\n    const city=event.target.elements.city.value;\n    const country=event.target.elements.country.value;\n\n    if(city && country){\n      const apiCall = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIkey}`);\n      const response =await apiCall.json();\n      console.log(response);\n      if(response.cod===\"404\"){\n        this.setState({error:true})\n      }else{\n        this.setState({\n      \n          city:`${response.name} , ${response.sys.country}`,\n          celcius:this.convertInCelcius(response.main.temp),\n          tempMIN:this.convertInCelcius(response.main.temp_min),\n          tempMAX:this.convertInCelcius(response.main.temp_max),\n          description:response.weather[0].description,\n          error:false,\n          });\n          this.getWeatherIcon(this.weatherIcon, response.weather[0].id)\n        }\n      }else{\n        this.setState({error:true})\n    }\n  }\n \n    \n    \n  \n  render(){\n    return (\n      <div className=\"App\">\n        <h1 className=\"yellow bt bb pa2\"   >Weather App</h1>\n        <Form  loadWeather={this.getWeather}  error={this.state.error}/>\n        <Weather \n          city={this.state.city} \n          country={this.state.country}\n          celcius={this.state.celcius}\n          tempMIN={this.state.tempMIN}\n          tempMAX={this.state.tempMAX}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n          />\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}